<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@48,400,0,0" />
<div class="container mt-5">
  <div class="row">
    <div class="col-12">
      <div class="wrapper center-wrapper-out">
        <div class="center-wrapper-in div-width-md">
          <div class="col-12 mb-4 font-shadow-default font-align-left">
            <h1>Create</h1>
          </div>
          <div class="font-align-left">
            <div class="form-check">
              <input class="form-check-input" type="radio" name="ercType" id="ercType721" value="erc721" checked>
              <label class="form-check-label" for="ercType721">
                ERC721
              </label>
            </div>
            <div class="form-check">
              <input class="form-check-input" type="radio" name="ercType" id="ercType1155" value="erc1155">
              <label class="form-check-label" for="ercType1155">
                ERC1155
              </label>
            </div>
          </div>
          <div class="form-group font-align-left">
            <h5>File input</h5>
            <div class="div-file-upload mb-4">
              <input id="input-imageFile" name="inputFileUpload" type="file" hidden />
              <div class="div-flex-center" name="inform">
                <i class="bi bi-card-image icon-size-bg icon-color"></i>
                <span style="color: rgb(120, 120, 120);">Click here to upload Image</span>
              </div>
              <div class="file-preview-div d-none" name="preview">
                <img class="file-preview" src="">
              </div>
            </div>

            <h5>Name</h5>
            <div class="input-group mb-3">
              <input id="input-name" type="text" class="form-control">
            </div>

            <h5>External Link</h5>
            <div class="input-group mb-3">
              <input id="input-externalLink" type="text" class="form-control">
            </div>

            <h5>Description</h5>
            <div class="input-group mb-3">
              <textarea id="input-description"class="form-control" rows="3"></textarea>
            </div>

            <h5>Collection</h5>
            <div class="input-group mb-3">
              <div class="form-floating">
                <select id="input-collection" class="form-select" aria-label="">
                  <option selected>no data</option>
                </select>
                <label for="input-collection">select User Collection</label>
              </div>
            </div>

            <div id="ercTypeAmount" class="d-none">
              <h5>Amount</h5>
              <div class="input-group mb-3">
                <input id="input-amount" type="number" class="form-control" min="1" numberOnly >
              </div>
            </div>

            <h5>Properties</h5>
            <div class="input-group mb-3">
              <table class="table" id="input-propertiesTable">
                <colgroup>
                  <col style="width:40%">
                  <col style="width:50%">
                  <col style="width:10%">
                </colgroup>
                <tr>
                  <th>Type</th>
                  <th>Value</th>
                  <th>
                    <button type="button" class="btn btn-outline-primary btn-sm" onclick="fn_table_AddRowInput('input-propertiesTable', ['',''], -1, true)">
                      <i class="bi bi-plus-circle" style="font-weight: bold; color:blue"></i>
                    </button>
                  </th>
                </tr>
                <tr>
                  <td>
                    <input type="text" class="form-control" value="">
                  </td>
                  <td>
                    <input type="text" class="form-control" value="">
                  </td>
                  <td>
                    <button type="button" class="btn btn-outline-danger btn-sm" onclick="fn_table_RemoveRow('input-propertiesTable', this.parentNode.parentNode)">
                      <i class="bi bi-dash-circle" style="font-weight: bold; color:red"></i>
                    </button>
                  </td>
                </tr>
              </table>
            </div>
          </div>
          <div>
            <button class="btn btn-primary" id="upload">Upload and Mint</button>
          </div>
        </div>

      </div>
    </div>
    <div class="col-12">
      <div class="input-group mb-3" id="resultSpace"></div>
    </div>
  </div>
</div>

<script>
  const nftType = "erc1155";
  const nameDom = document.getElementById("input-name");
  const externalLinkDom = document.getElementById("input-externalLink");
  const descriptionDom = document.getElementById("input-description");
  const amountDom = document.getElementById("input-amount");
  const collectionDom = document.getElementById("input-collection");
  const uploadAndMintBtn = document.getElementById("upload");
  const fileUploadDivCollectionArray = document.getElementsByClassName("div-file-upload")
  const amountOfTokenDom = document.getElementById("input-amount");
  const ercTypeAmountDom = document.getElementById("ercTypeAmount");
  const fileUploadDivArray = [...fileUploadDivCollectionArray];
  let ercType = 'erc721'

  const radios = document.querySelectorAll('input[name="ercType"]');
  radios.forEach(radio => {
    radio.addEventListener("click", () => {
      ercType = radio.value;
      if(ercType == 'erc721') {
        ercTypeAmount.classList.add("d-none")
      } else {
        ercTypeAmount.classList.remove("d-none")
      }
    })
  });

  afterInitFunction = async () => {
    // wallet address setting
    myWalletAddress = await getAccount();

    erc721_contract = await contractClassDecorator(BasicERC721ContractWrapper, defaultContractAddressObj[networkId].erc721, ERC721_CONTRACT_ABI);
    erc1155_contract = await contractClassDecorator(BasicERC1155ContractWrapper, defaultContractAddressObj[networkId].erc1155, ERC1155_CONTRACT_ABI);
  }

  // file input and preview image
  fileUploadDivArray.forEach(element => {
    element.addEventListener("click", () => {
      element.children.inputFileUpload.click()
    })
    element.children.inputFileUpload.addEventListener("change", inputEvent => {
      element.children.inform.classList.add("d-none");
      element.children.preview.classList.remove("d-none");
      element.children.preview.children[0].src = URL.createObjectURL(inputEvent.target.files[0])
    })
  });

  amountDom.addEventListener("blur", e => {
    // 숫자빼고 삭제
    amountDom.value = amountDom.value.replace(/[^0-9]/g, "");
  })

  // upload button
  uploadAndMintBtn.addEventListener("click", async e => {
    fn_overlay_blindLoading(true, "NFT 생성중")
    let resultMetadataObject = {};
    resultMetadataObject.name = nameDom.value;
    resultMetadataObject.external_url = externalLinkDom.value;
    resultMetadataObject.description = descriptionDom.value;

    // file upload to IPFS
    fn_overlay_blindLoading(true, "IPFS에 이미지 업로드중")
    let imageFileDom = document.getElementById("input-imageFile");
    try {
      let fetchResponse = await uploadFile(imageFileDom.files[0])
      if(fetchResponse.ok){
        let fetchResponseObj = await fetchResponse.json();
        if(fetchResponseObj.data.baseUri){
          resultMetadataObject.image = fetchResponseObj.data.baseUri + fetchResponseObj.data.uri;
        } else {
          resultMetadataObject.image = fetchResponseObj.data.uri
        }
      } else {
        console.log("Image file upload error")
        throw "ipfs upload eror occured."
      }
    } catch (error) {
      console.error(error);
    }

    // make properties obj array
    fn_overlay_blindLoading(true, "속성값 지정중")
    let propertiesObj = fn_table_getInputDataFromTableId("input-propertiesTable", true);
    let properties = [];
    for(let i=0; i<propertiesObj.data.length; i++){
      if(propertiesObj.data[i][0] != "" && propertiesObj.data[i][1] != ""){
        let tempProperty = {};
        tempProperty["trait_type"] = propertiesObj.data[i][0];
        tempProperty["value"] = propertiesObj.data[i][1];
        properties.push(tempProperty)
      }
    }
    resultMetadataObject.attributes = properties;

    // upload Metadata to IPFS
    fn_overlay_blindLoading(true, "IPFS에 메타데이터 업로드중")
    let erc1155IpfsMetadataBaseUri, erc1155IpfsMetadataUri;
    // upload json metadata to IPFS
    try {
      let fetchResponse = await uploadJson(JSON.stringify(resultMetadataObject))
      if(fetchResponse.ok){
        console.log("Metadata file upload ok")
        let fetchResponseObj = await fetchResponse.json();
        console.log(fetchResponseObj)
        erc1155IpfsMetadataBaseUri = fetchResponseObj.data.baseUri ? fetchResponseObj.data.baseUri : "";
        erc1155IpfsMetadataUri = fetchResponseObj.data.uri;
      } else {
        console.log("Metadata file error")
        throw "ipfs upload eror occured."
      }
    } catch (error) {
      console.error(error);
    }


    fn_overlay_blindLoading(true, "블록체인에 NFT 민팅중")
    if(ercType == 'erc721'){
      await mintToken(await getAccount(), 1, erc1155IpfsMetadataBaseUri, erc1155IpfsMetadataUri);
    } else {
      await mintToken(await getAccount(), amountOfTokenDom.value, erc1155IpfsMetadataBaseUri, erc1155IpfsMetadataUri);
    }
  })

  async function mintToken(to, amountOfToken, baseUri, uri) {
    console.log("call mintToken");

    const successCallback = (receipt) => {
      // NFT 상세 페이지로 이동
      setTimeout(() => {
        window.location.href = `../nft/${receipt.events.MintToken.address}/${receipt.events.MintToken.returnValues.tokenId}`;
      }, 2000);
    }
    const errorCallback = (error, receipt) => {
      fn_overlay_blindLoading(false)
    }

    let option = getDefaultMethodOptionCallback("민팅", successCallback, errorCallback)
    if(ercType == 'erc721'){
      return erc721_contract.mintToken(to, uri, option)
    } else {
      return erc1155_contract.mint(to, amountOfToken, uri, option)
    }
  }
</script>
